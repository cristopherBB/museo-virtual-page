{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport { tap, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    constructor(http) {\n      this.http = http; //---------------------------------------------------------------------------------\n\n      this.userRole = 'visitante';\n      /**\r\n       * Fetches a museum and it's details.\r\n       * @param label - Museum identifier.\r\n       * @returns {Observable<MuseumArtifactsResponse>} The museum requested Overview.\r\n       */\n\n      this.getMuseumArtifacts = label => {\n        const url = environment.apiUrl + `/museum/?label=\"${label}\"`;\n        return this.http.get(url).pipe(tap(console.log));\n      };\n      /**\r\n       * Fetches all museums overview.\r\n       * @returns {Observable<MuseumsResponse>} A list with all the museums.\r\n       */\n\n\n      this.getMuseums = () => {\n        const url = environment.apiUrl + '/museums';\n        return this.http.get(url).pipe(tap(console.log));\n      };\n\n      this.getMuseumDetails = label => {\n        const url = environment.apiUrl + '/museums';\n        return this.http.get(url).pipe(tap(console.log), map(response => response.result.find(museum => museum.label === label)));\n      };\n      /**\r\n       * Fetches an Artefact and it's details.\r\n       * @param id - Artefact identifier.\r\n       * @returns {Observable<MuseumArtifactsResponse>} The artefact requested details.\r\n       */\n\n\n      this.getArtefact = id => {\n        const url = environment.apiUrl + `/artifact/${id}`;\n        return this.http.get(url).pipe(tap(console.log));\n      };\n      /**\r\n       * Executes an http get request.\r\n       * @param url - The url to get from.\r\n       * @param headers - Optional headers for the http request.\r\n       * @returns {Observable<T>} An observable of the generic defined type.\r\n       */\n\n\n      this.get = (url, headers) => {\n        const options = headers ? {\n          headers\n        } : undefined;\n        return this.http.get(url, options);\n      };\n    } //userRole = 'admin';\n    //---------------------------------------------------------------------------------\n\n    /** Servicio para realizar cambio de la vista que se muestra segun el tipo de usuario.\r\n     * @returns\r\n     */\n\n\n    changeRole() {\n      let vista = this.userRole;\n\n      if (vista === \"visitante\") {\n        this.userRole = \"admin\";\n      } else {\n        this.userRole = \"visitante\";\n      }\n    }\n    /** Servicio para realizar login de un usuario.\r\n     * @param {string} email0 correo del usuario a realizar login\r\n     * @param {string} password0 contrasena del usuario\r\n     * @returns\r\n     */\n\n\n    login(email0, password0) {\n      const url = environment.apiUrl + `/users/login`;\n      const payload = {\n        email: email0,\n        password: password0\n      };\n      return this.http.post(url, {\n        email: email0,\n        password: password0\n      }).pipe(tap(console.log));\n    }\n    /** Servicio para realizar registro de un admin.\r\n     * @param {string} email0 correo del Usuario a realizar login\r\n     * @param {string} first_name0 nombre del usuario\r\n     * @param {string} last_name0 apellido del usuario\r\n     * @param {string} password0 contrasena del usuario\r\n     * @param {string} type0 tipo de usuario\r\n     * @returns\r\n     */\n\n\n    signUp(email0, first_name0, last_name0, password0, type0) {\n      const url = environment.apiUrl + `/users/new_user`;\n      const payload = {\n        email: email0,\n        first_name: first_name0,\n        last_name: last_name0,\n        password: password0,\n        type: type0\n      };\n      return this.http.post(url, {\n        email: email0,\n        first_name: first_name0,\n        last_name: last_name0,\n        password: password0,\n        type: type0\n      }).pipe(tap(console.log));\n    }\n    /**\r\n      * Fetches an artifact image url.\r\n      * @param id - Artifact identifier.\r\n      * @returns The url of the artifact image.\r\n      */\n\n\n    getArtifactImage(id) {\n      const url = environment.apiUrl + `/image/${id}`;\n      return url;\n    }\n\n    /** Servicio para realizar login de un usuario.\r\n     * @param {string} id id del museo\r\n     * @param {string} oldDescription descripcion anterior del museo\r\n     * @param {string} newDescription descripcion nueva del museo\r\n     * @returns\r\n     */\n    updateDescription(id, oldDescription0, newDescription0) {\n      const token = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImNhcmxvc0BjYXJsaXRvcy5jb20iLCJpYXQiOjE2MjY5NTk2MzAsImV4cCI6MTYyOTU1MTYzMH0.ouyOUrrB8eDqfYZ90I5Un4MaNwz8eB5GlTgTckosF6s\";\n      const header = new HttpHeaders({\n        \"Authorization\": token\n      });\n      const url = environment.apiUrl + `/museum/update/${id}`;\n      console.log(url);\n      const payload = {\n        oldDescription: oldDescription0,\n        newDescription: newDescription0\n      };\n      return this.http.put(url, {\n        oldDescription: oldDescription0,\n        newDescription: newDescription0\n      }, {\n        headers: header\n      }).pipe(tap(console.log));\n    }\n    /** Servicio para obtener las imagenes de los recorridos de un museo.\r\n     * @param {string} id id del museo\r\n     * @returns\r\n     */\n\n\n    getMuseumImg(id0) {\n      const url = environment.apiUrl + `/image/museums/${id0}`;\n      return this.http.get(url).pipe(tap(console.log));\n    }\n\n  }\n\n  ApiService.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac,\n    providedIn: 'root'\n  });\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module"}