{"ast":null,"code":"import $ from 'jquery';\nimport { ModalComponent } from '../virtual-museum/modal/modal.component';\nimport Ajv from \"ajv\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/platform-browser\";\nimport * as i2 from \"@angular/material/dialog\";\nimport * as i3 from \"./api.service\";\nconst ajv = new Ajv();\nexport let PannellumService = /*#__PURE__*/(() => {\n  class PannellumService {\n    constructor(sanitizer, dialog, apiServive) {\n      this.sanitizer = sanitizer;\n      this.dialog = dialog;\n      this.apiServive = apiServive;\n      this.sceneJson = {};\n      this.scenes = [];\n      this.mouseToogle = false;\n      this.schema = {\n        \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n        \"definitions\": {\n          \"imagen\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"alt\": {\n                \"type\": \"string\"\n              },\n              \"height\": {\n                \"type\": \"number\"\n              },\n              \"src\": {\n                \"type\": \"string\"\n              },\n              \"width\": {\n                \"type\": \"number\"\n              }\n            }\n          },\n          \"modal\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"description\": {\n                \"type\": \"string\"\n              },\n              \"imagen\": {\n                \"$ref\": \"#/definitions/imagen\"\n              },\n              \"title\": {\n                \"type\": \"string\"\n              },\n              \"type\": {\n                \"type\": \"string\"\n              }\n            }\n          },\n          \"customIcon\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"alt\": {\n                \"type\": \"string\"\n              },\n              \"height\": {\n                \"type\": \"number\"\n              },\n              \"src\": {\n                \"type\": \"string\"\n              },\n              \"width\": {\n                \"type\": \"number\"\n              }\n            }\n          },\n          \"createTooltipArgs\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"customIcon\": {\n                \"$ref\": \"#/definitions/customIcon\"\n              },\n              \"id\": {\n                \"type\": \"string\"\n              },\n              \"modal\": {\n                \"$ref\": \"#/definitions/modal\"\n              },\n              \"title\": {\n                \"type\": \"string\"\n              }\n            }\n          },\n          \"hotspot\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"properties\": {\n                \"id\": {\n                  \"type\": \"string\"\n                },\n                \"sceneId\": {\n                  \"type\": \"string\"\n                },\n                \"pitch\": {\n                  \"type\": \"number\"\n                },\n                \"cssClass\": {\n                  \"type\": \"string\"\n                },\n                \"targetPitch\": {\n                  \"type\": \"number\"\n                },\n                \"targetYaw\": {\n                  \"type\": \"number\"\n                },\n                \"text\": {\n                  \"type\": \"string\"\n                },\n                \"type\": {\n                  \"type\": \"string\"\n                },\n                \"yaw\": {\n                  \"type\": \"number\"\n                },\n                \"createTooltipArgs\": {\n                  \"$ref\": \"#/definitions/createTooltipArgs\"\n                },\n                \"div\": {\n                  \"type\": \"string\"\n                },\n                \"url\": {\n                  \"type\": \"string\"\n                }\n              },\n              \"required\": [\"id\"]\n            },\n            \"default\": []\n          },\n          \"scenes\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"properties\": {\n                \"title\": {\n                  \"type\": \"string\"\n                },\n                \"panorama\": {\n                  \"type\": \"string\"\n                },\n                \"yaw\": {\n                  \"type\": \"number\"\n                },\n                \"hotSpots\": {\n                  \"$ref\": \"#/definitions/hotspot\"\n                }\n              },\n              \"required\": [\"title\"]\n            },\n            \"default\": []\n          }\n        },\n        \"type\": \"object\",\n        \"properties\": {\n          \"scenes\": {\n            \"$ref\": \"#/definitions/scenes\"\n          }\n        },\n        \"required\": [\"scenes\"]\n      };\n      /**\r\n       * setScene\r\n       * Establece la escena a mostrar\r\n       * @param sceneId id de la escena\r\n       */\n\n      this.setScene = sceneId => {\n        if (this.pannellumViewer) this.pannellumViewer.loadScene(sceneId);\n      };\n    }\n    /**\r\n     * generateId\r\n     *\r\n     * Generar un id totalmente random para manjear los hotspot a traves de la API de Pannellum\r\n     * @param id id del elemento\r\n     * @returns newId, el nuevo id generado aleatoreamente\r\n     */\n\n\n    generateId(id) {\n      //  existe el id, usar ese\n      if (id) return id; // Crear un nuevo id con la estructura 'tc-xxxx'\n\n      let newId = 'tc-' + String(Math.floor(Math.random() * (9999 - 1000 + 1)) + 1000);\n      return newId;\n    }\n    /**\r\n     * constructScenes\r\n     *\r\n     * Construir las escenas a partir de un archivo de configuracion\r\n     * @param config Json que viene del archivo de configuracion con los parametros del tour\r\n     * @returns sceneJson, el json formateado de manera que sea legible para pannellum para poder construir el tour\r\n     */\n\n\n    constructScenes(config) {\n      console.log('config');\n      console.log(config); // leer el archivo de configuracion\n      // Construir cada Escena\n\n      this.scenes = [];\n      this.sceneJson = {};\n      config.scenes.forEach(scene => {\n        // Guardar el orden de las scenes\n        this.scenes.push(scene['id']); // Construir cada Hotspot con la config\n\n        let hotspotsArray = [];\n        scene.hotSpots.forEach(hotspot => {\n          // Crear los hotspot segun el tipo\n          let aux; // Usar el id o generarlo en caso de no especificarlo\n\n          let id = this.generateId(hotspot['id']);\n          aux = {\n            'id': id,\n            'pitch': hotspot['pitch'],\n            'yaw': hotspot['yaw'],\n            'text': hotspot['text'],\n            'type': hotspot['type'],\n            'targetYaw': hotspot['targetYaw'] || -23,\n            'targetPitch': hotspot['targetPitch'] || 2,\n            'cssClass': hotspot['cssClass']\n          };\n\n          if (hotspot['sceneId']) {\n            aux.sceneId = hotspot['sceneId'] || null;\n          }\n\n          if (hotspot['url']) {\n            aux.url = hotspot['url'] || null;\n          }\n\n          if (hotspot['createTooltipArgs']) {\n            aux.createTooltipFunc = this.hotspot.bind(this), aux.createTooltipArgs = {\n              'title': hotspot['title'],\n              'id': hotspot['id'],\n              'customIcon': hotspot['createTooltipArgs']['customIcon']\n            };\n          }\n\n          if (hotspot['show_modal'] == 'local') {\n            aux.createTooltipArgs.modal = hotspot['createTooltipArgs']['modal'], aux.createTooltipArgs.modal.type = \"local\";\n          } else if (hotspot['show_modal'] == 'db') {\n            aux.createTooltipArgs.modal = hotspot['createTooltipArgs']['modal'], aux.createTooltipArgs.modal.type = \"db\";\n          } // Agregar el hotspot al array\n\n\n          hotspotsArray.push(aux);\n        }); // Construccion de la Scena\n\n        let sceneAux = {\n          \"id\": scene['id'],\n          \"title\": scene['title'],\n          \"hfov\": scene['hfov'] || 110,\n          \"yaw\": scene['yaw'] || 150,\n          \"panorama\": scene['panorama'],\n          \"type\": \"equirectangular\",\n          \"hotSpots\": hotspotsArray\n        };\n        this.sceneJson[scene['id']] = sceneAux;\n      });\n      let validate = this.validateSchema(this.parseSchenesJson());\n\n      if (validate) {\n        return {\n          error: validate\n        };\n      }\n\n      return this.sceneJson;\n    } // * initPannellum\n    //  *\n    //  * iniciar pannellum\n    //  * @param panoramaHTML id del elemento panorama en el DOM\n    //  * @param viewId primera escena a mostrar\n    //  * @param sceneJson json formateado de manera que sea legible para pannellum para poder construir el tour\n    //  * @param edit determina si el tour sera editable o no\n    //  */\n\n\n    initPannellum(panoramaHTML, viewId, sceneJson, edit = null) {\n      console.info(\"Iniciando pannellum\"); // Guardar la escena activa\n\n      this.activeScene = viewId;\n      console.log(\"aqui estoy\"); // Iniciar pannellum\n\n      this.pannellumViewer = pannellum.viewer(panoramaHTML, {\n        \"showFullscreenCtrl\": true,\n        \"autoLoad\": true,\n        \"multiResMinHfov\": true,\n        \"default\": {\n          \"firstScene\": viewId,\n          \"sceneFadeDuration\": 1000\n        },\n        \"scenes\": sceneJson\n      });\n      console.log(\"aqui estoy\"); // Activar los eventos para agregar hotSpots\n\n      if (edit) {\n        // Evento para click del mouse agregar un nuevo addHotspothotspot\n        this.pannellumViewer.on('mousedown', e => {\n          if (this.mouseToogle) {\n            let a = this.pannellumViewer.mouseEventToCoords(e); // console.log(a);\n\n            this.toogleAddHotspot(false);\n            this.addHotspot(a);\n          }\n        });\n      }\n    }\n    /**\r\n     * toogleAddHotspot\r\n     * Activar el evento de click\r\n     *\r\n     * @param b booleano para activar el evento click\r\n     */\n\n\n    toogleAddHotspot(b) {\n      this.mouseToogle = b;\n    }\n    /**\r\n     * enableAddHotspot\r\n     * Al agregar un hotspot en el toolCreator, se guardan las configuraciones y habilitar el evento click\r\n     * @param hotspotType El tipo del hostpot\r\n     * @param hotspot El hotspot\r\n     * @param customFun para usar la funcion custom o no\r\n     */\n\n\n    enableAddHotspot(hotspotType, hotspot, customFun = false) {\n      hotspotType; // Activar el evento\n\n      this.toogleAddHotspot(true); // Guardar el tipo de hotspot\n\n      this.hotspotType = hotspotType; // hotspot\n\n      this.nextAddHotspot = hotspot; // Si se va a usar la funcion custom\n\n      this.customFunction = customFun;\n      console.log('eableAddHotspot function');\n      console.log(this.sceneJson);\n      console.log(this.scenes);\n    }\n    /**\r\n     * getInitialScene\r\n     *  Devuelve el la scena solicitada\r\n     *\r\n     * @param index indice de la escena\r\n     * @returns escena o null, segun exista el indice\r\n     */\n\n\n    getInitialScene(index) {\n      console.log(this.scenes);\n      if (this.scenes.length > index) return this.scenes[index];\n      return null;\n    }\n    /**\r\n     * addHotspot\r\n     * Agregar el hotspot\r\n     * @param coords Coordenadas donde se dio click para agregar el hotspot\r\n     */\n\n\n    addHotspot(coords) {\n      console.log(this.nextAddHotspot); // Coordenadas\n\n      let pitch = coords[0];\n      let yaw = coords[1];\n      this.nextAddHotspot.pitch = pitch;\n      this.nextAddHotspot.yaw = yaw; // Agregar ID si no tiene\n\n      this.nextAddHotspot.id = this.generateId(this.nextAddHotspot.id);\n\n      if (this.customFunction) {\n        // Agregar la funcion custom\n        this.nextAddHotspot.createTooltipFunc = this.hotspot.bind(this); // guardar el mismo id\n\n        this.nextAddHotspot.createTooltipArgs.id = this.nextAddHotspot.id;\n      } // Agregar el hotspot\n\n\n      let p = this.pannellumViewer.getScene();\n      this.pannellumViewer.addHotSpot(this.nextAddHotspot, p);\n      console.log('add hotpost function pannellum');\n      console.log(this.sceneJson);\n      console.log(this.scenes);\n    }\n    /**\r\n     * removeHotspot\r\n     * Eliminar hotspot\r\n     * @param id Id del hotspot a eliminar\r\n     */\n\n\n    removeHotspot(id) {\n      let p = this.pannellumViewer.getScene();\n      this.pannellumViewer.removeHotSpot(id, p);\n      console.log(this.sceneJson);\n    }\n    /**\r\n     * getScenes\r\n     * DEvuelve las escenas\r\n     * @returns scenes Escenas del tour\r\n     */\n\n\n    getScenes() {\n      return this.scenes;\n    }\n    /**\r\n     * getHotspots\r\n     * Devuelve los hotSpots de la escena activa\r\n     * @returns lista de hostspot en caso de existir\r\n     */\n\n\n    getHotspots() {\n      if (this.sceneJson) {\n        if (this.sceneJson[this.activeScene]) {\n          return this.sceneJson[this.activeScene]['hotSpots'];\n        }\n      }\n\n      return [];\n    }\n    /**\r\n     * openModal\r\n     * Prepara la info que se va a mostrar en el Modal\r\n     * @param data Informacion del modal\r\n     */\n\n\n    openModal(data) {\n      // Search modal\n      console.log(`Abriendo Modal de ${data.title}`); // Width del modal\n\n      let w = 300;\n      let h = 300;\n\n      if (data.imagen) {\n        // Se calcula en base al width de la imagen.\n        w = (data.imagen.width > 800 ? 350 : data.imagen.width + 50) || 300;\n        h = (data.imagen.width > 800 ? 350 : data.imagen.width + 50) || 300;\n      } // Llamar el modal\n\n\n      const dialogRef = this.dialog.open(ModalComponent, {\n        width: w + 'px',\n        data: {\n          title: data.title,\n          description: data.description,\n          extra: data.extra,\n          image: data.imagen,\n          imageWidth: w,\n          imageHeight: h\n        }\n      });\n    }\n    /**\r\n    * hotspot\r\n    *\r\n    * Funcion de creacion de hotspot custom\r\n    * @param hotSpotDiv div del hotspot\r\n    * @param args Argumentos custom del hotspot\r\n    */\n\n\n    hotspot(hotSpotDiv, args) {\n      console.log(`Cargando Hotspot ${args.title}`); // Custom class\n\n      hotSpotDiv.classList.add('custom-tooltip'); // Custom ID\n\n      hotSpotDiv.id = args.id; // Se crea el evento para abrir el modal\n\n      if (args.modal) {\n        if (args.modal.type === \"db\") {\n          this.apiServive.getArtefact(args.modal.id).subscribe(data => {\n            let modalData = {\n              'title': data.result[0].labelArtifact.value || null,\n              'description': data.result[0].note.value || null,\n              'imagen': {\n                'src': args.modal.imagen.src,\n                'alt': args.modal.imagen.alt,\n                'width': args.modal.imagen.width,\n                'height': args.modal.imagen.height\n              }\n            };\n            let modal = document.getElementById(args.id);\n\n            modal.onclick = () => this.openModal(modalData);\n          });\n        } else {\n          let modal = document.getElementById(args.id);\n\n          modal.onclick = () => this.openModal(args.modal);\n        }\n      } // Create span element to tooltip\n\n\n      var span = document.createElement('span');\n      span.innerHTML = args.title;\n      hotSpotDiv.appendChild(span);\n      span.style.width = span.scrollWidth - 20 + 'px';\n      span.style.marginLeft = -(span.scrollWidth - hotSpotDiv.offsetWidth) / 2 + 24 + 'px';\n      span.style.marginTop = -span.scrollHeight - 12 + 'px';\n      span.classList.add('custom-tooltip-span'); // Se crea el evento para abrir el modal\n\n      if (args.modal && args.modal.title) {\n        let modal = document.getElementById(args.id);\n\n        modal.onclick = () => this.openModal(args.modal);\n      } // Custom icon\n\n\n      if (args.customIcon && args.customIcon.src) {\n        // Quitamos la clase de pannellum para quitar el icono por defecto\n        hotSpotDiv.classList.remove('pnlm-hotspot');\n        let width = args.customIcon.width || \"50\";\n        let height = args.customIcon.height || \"50\";\n        $(`#${args.id}`).append(`<img src=\"${args.customIcon.src}\" alt=\"${args.customIcon.alt}\" width=\"${width}\" height=\"${height}\">`);\n      }\n    }\n    /**\r\n     * OutputJson\r\n     *\r\n     * Genera un json a patir de las scenas almacenadas\r\n     */\n\n\n    OutputJson() {}\n    /**\r\n     * Nota: Para usar este service es necesario que el panellum este iniciado. El usuarlo sin que el panellum se encuentre instanciado puede\r\n     * traer como consecuencia la aparicion de errores referentes a que las escenas no tienen ningun hotpots.\r\n     *\r\n     * getAllHotspots\r\n     * Obtiene todos los hotSpots del recorrido\r\n     * @return arreglo con todos los hotSpots del recorrido\r\n     */\n\n\n    getAllHotspots() {\n      let hotSpots = [];\n\n      if (this.sceneJson) {\n        for (let i in this.scenes) {\n          for (let j of this.sceneJson[this.scenes[i]]['hotSpots']) {\n            hotSpots.push(j);\n          }\n        }\n\n        return hotSpots;\n      }\n\n      return [];\n    }\n    /**\r\n     * Nota: Para usar este service es necesario que el panellum este iniciado. El usuarlo sin que el panellum se encuentre instanciado puede\r\n     * traer como consecuencia la aparicion de errores referentes a que las escenas no tienen ningun hotpots.\r\n     *\r\n     * getCurrentSceneHotspots\r\n     * Obtiene la lista de hotSpots de la escena actual\r\n     * @return arreglo con todos los hotSpots de la escena\r\n     */\n\n\n    getCurrentSceneHotspots() {\n      if (this.pannellumViewer) {\n        let p = this.pannellumViewer.getScene();\n        return this.sceneJson[p]['hotSpots'];\n      }\n\n      return [];\n    }\n    /**\r\n    * Nota: Para usar este service es necesario que el panellum este iniciado. El usuarlo sin que el panellum se encuentre instanciado puede\r\n    * traer como consecuencia la aparicion de errores referentes a que las escenas no tienen ningun hotpots.\r\n    *\r\n    * getImageSource\r\n    * Obtiene la ruta de la imagen de una escena\r\n    * @param scene_id id de la escena\r\n    */\n\n\n    getImageSource(scene_id) {\n      if (this.sceneJson) {\n        if (this.sceneJson[scene_id]) {\n          return this.sanitizer.bypassSecurityTrustUrl(this.sceneJson[scene_id]['panorama']);\n        }\n      }\n\n      return [];\n    }\n    /**\r\n    * Nota: Para usar este service es necesario que el panellum este iniciado. El usuarlo sin que el panellum se encuentre instanciado puede\r\n    * traer como consecuencia la aparicion de errores referentes a que las escenas no tienen ningun hotpots.\r\n    *\r\n    * getSceneTitle\r\n    * Obtiene el título de una escena\r\n    * @param scene_id id de la escena\r\n    */\n\n\n    getSceneTitle(scene_id) {\n      if (this.sceneJson) {\n        if (this.sceneJson[scene_id]) {\n          return this.sceneJson[scene_id]['title'];\n        }\n      }\n\n      return [];\n    }\n    /**\r\n     * addSCene\r\n     * añadir escena\r\n     * @param scene_id Id de la escena a agregar\r\n     * @param confi arreglo con las configuraciones(titulo, url) de la nueva escena\r\n     */\n\n\n    addSCene(scene_id, confi) {\n      let escenaAux = {\n        \"title\": confi[0],\n        \"hfov\": 110,\n        \"yaw\": 150,\n        \"panorama\": confi[1],\n        \"type\": \"equirectangular\",\n        \"hotSpots\": []\n      };\n      this.pannellumViewer.addScene(scene_id, escenaAux);\n      this.scenes.push(scene_id);\n    }\n    /**\r\n     * removeSCene\r\n     * Eliminar escena\r\n     * @param id Id de la escena a eliminar\r\n     */\n\n\n    removeSCene(id) {\n      var index = this.scenes.indexOf(id);\n      this.pannellumViewer.removeScene(id);\n      this.scenes.splice(index, 1);\n      console.log(this.sceneJson);\n    }\n\n    validateSchema(data) {\n      var validate = ajv.compile(this.schema);\n      var valid = validate(data);\n      console.log(validate.errors);\n\n      if (valid) {\n        return false;\n      } else {\n        return validate.errors[0].message;\n      }\n    }\n\n    parseSchenesJson() {\n      let scenes = [];\n\n      for (const k in this.sceneJson) {\n        scenes.push(this.sceneJson[k]);\n      }\n\n      ;\n      let json = {\n        \"scenes\": scenes\n      };\n      return json;\n    }\n\n  }\n\n  PannellumService.ɵfac = function PannellumService_Factory(t) {\n    return new (t || PannellumService)(i0.ɵɵinject(i1.DomSanitizer), i0.ɵɵinject(i2.MatDialog), i0.ɵɵinject(i3.ApiService));\n  };\n\n  PannellumService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PannellumService,\n    factory: PannellumService.ɵfac,\n    providedIn: 'root'\n  });\n  return PannellumService;\n})();","map":null,"metadata":{},"sourceType":"module"}